#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;;; Clue Game - Clue Generator
;;; By Kenneth Bruce
;;; For Lab 2, CSIS 434 Spring 2019 at LU


(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.clue-generator.3759928521
  (:use :cl))
(in-package :ros.script.clue-generator.3759928521)

(defvar *import-db*)
;;*import-db* format:
;;| age          | crime          | gender          | time-location         | weapons        | all-weapon-list        | all-location-list | non-murderers | non-murder-weapons | non-murder-times | non-murder-locations |
;;|--------------+----------------+-----------------+-----------------------+----------------+------------------------+-------------------+---------------+--------------------+------------------+----------------------|
;;| (name, age)0 | (g,n,t,l,w,a)1 | (gender, name)2 | (name,time,location)3 | (name,weapon)4 | (weapon1,weapon2,etc)5 | (loc1,loc2,etc)6  |             7 |                  8 |                9 |                   10 |

;;global variables
(defvar *ages* nil)
(defvar *crime* nil)
(defvar *genders* nil)
(defvar *time-locations* nil)
(defvar *weapons* nil)
(defvar *all-weapons-list* nil)
(defvar *all-location-list* nil)
(defvar *non-murderers* nil)
(defvar *non-murder-weapons* nil)
(defvar *non-murder-times* nil)
(defvar *non-murder-locations* nil)

;;get the information about the murder from the file
(defun load-db (filename)
  (with-open-file (in filename)
    (with-standard-io-syntax
      (setf *import-db* (read in))))
  (setf *ages* (first *import-db*))
  (setf *crime* (second *import-db*))
  (setf *genders* (third *import-db*))
  (setf *time-locations* (fourth *import-db*))
  (setf *weapons* (fifth *import-db*))
  (setf *all-weapons-list* (first (sixth *import-db*)))
  (setf *all-location-list* (first (seventh *import-db*)))
  (setf *non-murderers* (first (eighth *import-db*)))
  (setf *non-murder-weapons* (first (nth 8 *import-db*)))
  (setf *non-murder-times* (first (nth 9 *import-db*)))
  (setf *non-murder-locations* (first (nth 10 *import-db*))))

;;prompt-read: function adapted from Peter Siebel's book "Practical Common Lisp" Section 3
(defun prompt-read (prompt)
  (format *query-io* "~a >" prompt)
  (force-output *query-io*)
  (read-line *query-io*))

;;return a random element of the list that is passed in
(defun random-element (target-list)
  (let ((rng (random (list-length target-list))))
    (nth rng target-list)))

;;return two different random elements of the list that is passed in
(defun two-different-random (target-list)
  (prog (first-item)
	 (setf first-item (random-element target-list))
	 (return-from two-different-random (values first-item (random-element (remove first-item target-list))))))


;;return true if the number is between the left end and the right end
(defun between (left-end number right-end)
  (cond
    ((and (<= left-end number) (<= number right-end)) t)
    ((and (>= left-end number) (>= number right-end)) t)
    (t nil)))


;;determine a clue based on the specified probability and generate it based on the data we have
(defun generate-clue ()
  (let ((rng (random 100)))
    (cond
      ((between 0 rng 5)
       (format nil "where_was(~(~a, ~a~))."
	       (first (random-element *time-locations*)) (second (random-element *time-locations*))))
      ((between 6 rng 9)
       (format nil "was_ever(~(~a,~a~))."
	       (first (random-element *time-locations*)) (random-element *all-location-list*)))
      ((between 10 rng 14)
       (format nil "which_weapon(~(~a~))."
	       (first (random-element *weapons*))))
      ((between 15 rng 19)
       (format nil "gender(~(~a~))."
	       (first (random-element *ages*))))
      ((between 20 rng 24)
       (format nil "what_age(~(~a~))."
	       (first (random-element *ages*))))
      ((between 25 rng 27)
       (format nil "all_~(~a~)."
	       (random-element '(males females))))
      ((between 28 rng 31)
       (format nil "over_age(~a)."
	       (random '100)))
      ((between 32 rng 35)
       (format nil "exact_age(~a)."
	       (random '100)))
      ((between 36 rng 40)
       (format nil "how_many_users(~(~a~))."
	       (random-element *all-weapons-list*)))
      ((between 41 rng 44)
       (format nil "what_users(~(~a~))."
	       (random-element *all-weapons-list*)))
      ((between 45 rng 47)
       (format nil "all_day(~(~a~))."
	       (first (random-element *weapons*))))
      ((between 48 rng 51)
       (multiple-value-bind (suspect-1 suspect-2) (two-different-random *ages*)
	 (format nil "were_same_place(~(~a,~a~))." (first suspect-1) (first suspect-2))))
      ((between 52 rng 54)
       (format nil "murderer_gender."))
      ((between 55 rng 56)
       (format nil "murderer_name."))
      ((between 57 rng 59)
       (format nil "murderer_time."))
      ((between 60 rng 62)
       (format nil "murderer_location."))
      ((between 63 rng 65)
       (format nil "murderer_weapon."))
      ((between 66 rng 68)
       (format nil "murderer_age."))
      ((between 69 rng 71)
       (format nil "is_murderer(~(~a~))."
	       (third (random-element *non-murderers*))))
      ((between 72 rng 74)
       (format nil "is_murder_weapon(~(~a~))."
	       (random-element *non-murder-weapons*)))
      ((between 75 rng 77)
       (format nil "is_murder_time(~(~a~))."
	       (random-element *non-murder-times*)))
      ((between 78 rng 80)
       (format nil "is_murder_location(~(~a~))."
	       (random-element *non-murder-locations*)))
      ((between 81 rng 85)
       (format nil "when_was(~(~a,~a~))."
	       (first (random-element *ages*)) (random-element *all-location-list*)))
      ((between 86 rng 88)
       (format nil "was_ever(~(~a,~a~))."
	       (first (random-element *time-locations*)) (random-element *all-location-list*)))
      ((between 89 rng 91)
       (format nil "locations."))
      ((between 92 rng 94)
       (format nil "times."))
      ((between 95 rng 96)
       (multiple-value-bind (suspect-1 suspect-2) (two-different-random *ages*)
	 (format nil "narrow_murderer_2(~(~a,~a~))." (first suspect-1) (first suspect-2))))
      ((between 97 rng 98)
       (multiple-value-bind (weapon-1 weapon-2) (two-different-random *all-weapons-list*)
	 (format nil "narrow_weapon_2(~(~a,~a~))." weapon-1 weapon-2)))
      ((between 98 rng 99)
       (format nil "Sorry, you are the 1%. You get no clue!!!")))))

;;this is the main game loop. players who guess wrong are eliminated. the game ends when all players have guessed wrong, or someone guesses right
(defun main-loop (num-players)
  (let ((player-list (loop for y from 1 to num-players collecting y)) (black-list nil))
    (loop
       (loop for x in player-list do
	    (cond
	      ((not (member x black-list))
	       (progn
		 (format t "Player ~a, it is now your turn.~%" x)
		 (prog ((player-choice (prompt-read "Press ENTER to get your clue or type GUESS to try to guess.")))
		    (cond
		      ((equalp player-choice "GUESS")
		       (progn
			 (format t "Enter your guess in the prolog terminal as:~%guess_crime(gender,suspect,time,location,weapon,age).~%")
			 (cond
			   ((y-or-n-p "Were you successful? ") (return-from main-loop 'GAME_OVER))
			   (t (push x black-list)))))
		      (t
		       (progn
			 (format t "~%~a~%" (generate-clue))
			 (prompt-read "Press ENTER when you are done.")
			 (format t "~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%~%")))))))
	      ((equalp (list-length black-list) (list-length player-list)) (return-from main-loop 'GAME_OVER))
	      (t nil))))))

;;main loop - find out how many are playing and then start the game
(defun main (&rest argv)
  (declare (ignorable argv))
  (load-db "db.txt")
  (setf *random-state* (make-random-state t))
  (let ((player-count (parse-integer (prompt-read "Welcome! How many players? "))))
    (main-loop player-count)))

;;; vim: set ft=lisp lisp:
