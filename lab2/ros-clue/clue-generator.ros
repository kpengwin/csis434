#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  ;;#+quicklisp(ql:quickload '() :silent t)
  )

(defpackage :ros.script.clue-generator.3759928521
  (:use :cl))
(in-package :ros.script.clue-generator.3759928521)

(defvar *import-db*)
;;*import-db* format:
;;| age         | crime         | gender         | time-location        | weapon        |
;;|-------------+---------------+----------------+----------------------+---------------|
;;| (name, age) | (g,n,t,l,w,a) | (gender, name) | (name,time,location) | (name,weapon) |
(defvar *ages* nil)
(defvar *crime* nil)
(defvar *genders* nil)
(defvar *time-locations* nil)
(defvar *weapons* nil)


(defun load-db (filename)
  (with-open-file (in filename)
    (with-standard-io-syntax
      (setf *import-db* (read in))))
  (setf *ages* (first *import-db*))
  (setf *crime* (second *import-db*))
  (setf *genders* (third *import-db*))
  (setf *time-locations* (fourth *import-db*))
  (setf *weapons* (fifth *import-db*)))

(defun random-element (target-list)
  (let ((rng (random (list-length target-list))))
    (nth rng target-list)))

(defun between (left-end number right-end)
  (cond
    ((and (<= left-end number) (<= number right-end)) t)
    ((and (>= left-end number) (>= number right-end)) t)
    (t nil)))

(defun generate-clue ()
					;(let ((rng (random 100)))
  (let ((rng 26))
    (cond
      ((between 0 rng 5)
       (format nil "where_was(~(~a, ~a~))." (first (random-element *time-locations*)) (second (random-element *time-locations*))))
      ((between 6 rng 9)
       (format nil "Clue 2"))
      ((between 10 rng 14)
       (format nil "which_weapon(~(~a~))." (first (random-element *weapons*))))
      ((between 15 rng 19)
       (format nil "gender(~(~a~))." (first (random-element *ages*))))
      ((between 20 rng 24)
       (format nil "what_age(~(~a~))." (first (random-element *ages*))))
      ((between 25 rng 27)
       (format nil "all_~(~a~)." (random-element '(males females))))
      ((between 28 rng 31)
       (format nil "Clue 7"))
      ((between 32 rng 35)
       (format nil "Clue 8"))
      ((between 36 rng 40)
       (format nil "Clue 9"))
      ((between 41 rng 44)
       (format nil "Clue 10"))
      ((between 45 rng 47)
       (format nil "Clue 11"))
      ((between 48 rng 51)
       (format nil "Clue 12"))
      ((between 52 rng 54)
       (format nil "murderer_gender."))
      ((between 55 rng 56)
       (format nil "murderer_name."))
      ((between 57 rng 59)
       (format nil "murderer_time."))
      ((between 60 rng 62)
       (format nil "murderer_location."))
      ((between 63 rng 65)
       (format nil "murderer_weapon."))
      ((between 66 rng 68)
       (format nil "murderer_age."))
      ((between 69 rng 71)
       (format nil "Clue 19"))
      ((between 72 rng 74)
       (format nil "Clue 20"))
      ((between 75 rng 77)
       (format nil "Clue 21"))
      ((between 78 rng 80)
       (format nil "Clue 22"))
      ((between 81 rng 85)
       (format nil "Clue 23"))
      ((between 86 rng 88)
       (format nil "Clue 24"))
      ((between 89 rng 91)
       (format nil "Clue 25"))
      ((between 92 rng 94)
       (format nil "Clue 26"))
      ((between 95 rng 96)
       (format nil "Clue 27"))
      ((between 97 rng 98)
       (format nil "Clue 28"))
      ((between 98 rng 99)
       (format nil "Clue 29")))))

(defun main (&rest argv)
  (declare (ignorable argv))
  (load-db "db.pl")
  (print *import-db*)
  (setf *random-state* (make-random-state t))
  (print (random-element *weapons*))
  (print (generate-clue)))

;;; vim: set ft=lisp lisp:
